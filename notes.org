* framework
** frameworks require a testsuite for variable subsitution, tests need to reflect that
** process-command is kind of squirrely. It will merge a command string list and then split it again
** check that the process is set to the right buffer currently it is set to (current-buffer)
** process-filters second arguement is a list of strings
** pass process-status to build and run filters
** Framework should probably be set at the ut-conf level not at the individual test-suite level
* General
** Models
*** project
    :PROPERTIES:
    :type:     Hash table
    :description: Definition of a projects testing environment
    :END:
**** project-name
     :PROPERTIES:
     :type:     path
     :description: Name of the project
     :END:
**** project-dir
     :PROPERTIES:
     :description: Path to the root of the project
     :type:     path
     :END:
**** project-test-dir
     :PROPERTIES:
     :type:     path
     :description: Path to the root where test-suites are defined
     :END:
**** project-test-suites
     :PROPERTIES:
     :type:     list
     :description: List of test-suites definitions (see below for definition of test-suite)
     :END: 
**** project-framework
     :PROPERTIES:
     :type:     symbol
     :description: Framework for the testing environment (see ut-framework for more information)
     :END:
*** test-suite
    :PROPERTIES:
    :type:     Hash Table
    :description: Definition of a test-suite within a project
    :END:
**** test-suite-name  
     :PROPERTIES:
     :type:     string
     :description: Name of the test-suite
     :END:
**** test-suite-test-dir
     :PROPERTIES:
     :type:     path
     :description: Path to the root of where the test-suite is defined, relative to the project-test-dir (see project-test-dir for more information)
     :END:
**** test-suite-framework
     :PROPERTIES:
     :type:     symbol
     :description: Testing framework for the test-suite, inherited from project (see ut-framework for more information)
     :END:
**** test-suite-build-command
     :PROPERTIES:
     :type:     string/function/nil
     :description: Command to build test-suite. If test-suite-build-command is a string or list of strings it is a shell command. If it is a function it is the function that will build the test. If nil there is no need to build the test-suite.
     :END:
**** test-suite-build-filter
**** test-suite-build-status
**** test-suite-run-filter
**** test-suite-run-status
**** test-suite-result
*** test
    :PROPERTIES:
    :type:     list
    :description: Definition of a test within a test-suite
    :END:
**** test-name
**** test-last-result
**** test-last-file
**** test-last-line-number
**** test-last-message
*** framework
    :PROPERTIES:
    :description: Definition of how tests are performed in a given type of testing harness
    :END:
*** test-suite-results
**** Structure
     - Hash Table with the following symbolic keys
       - :start-time ~ string
       - :end-time ~ string
       - :name ~ string
       - :test ~ list of test-results
*** test-results
**** Structure
     - Hash table with the following symbolic key
       - :name ~ string
       - :status ~ symbol of the following values: '(succeeded failed error not-run unknown)
       - :output ~ string
       - :assertions ~ optional list of assertion-results
* Random
** TODO %project-dir% is not being expanded because it isn't part of the test-suite hashtable
** TODO ut-framework-new-test-suite-hook should probably take the ut-conf as well as the test-suite
** TODO ut-test-suite-p is looking for ut-test-suite-run-command to be defined as either a string of function
** TODO ut-draw-buffer and ut both use with-current-buffer, doesn't hurt anything but is redundent
** DONE ut-build-test-suite
*** ut-buffer-p is not defined but called
*** ut-get-test-suite-at-point is not defined but called
*** interactive call dumps if not in ut-buffer, probably should ask for input from user instead
** TODO ut-draw-test-suite needs a lot of work, need to hash out summarize features as well as test-suite status
** TODO weird glitch in flycheck on ut-define-framework, functionp doesn't appear to be working, 
   could be a temp file issue investigate further.
** DONE adding a test asks for the framework, which it should just inherit from the conf
** DONE adding AC_CONFIG_FILES for the test directory doesn't appear to be automatic for some reason
** DONE new cunit tests don't add AC_CONFIG_FILES to configure.ac (tests/${TEST-SUITE}/Makefile, tests/${TEST-SUITE}/src/Makefile
** DONE Makefile.am for new test uses absolute path with ~/ unexpanded, need to change to relative back path
   Current solution is a bit hackish.
** DONE Makefile.am in ${test-suite}/src/ using camel case instead of snake case for cunit
** DONE Wrong path for cunit-sexp-outputer include and lib
** DONE Make UT buffer readonly by default
** DONE Fix building from ut buffer
   Building a test suite doesn't currently display anything
** DONE Create logging facilities
** DONE Build command moves point to end of buffer after finishing
   Fixed for the most part, fall out from destorying the contents of
   the buffer and inserting new information. Now preserves the
   current line number. Ideally it will go back to the last grouping
   it was in/on, but that can be for another times.
** DONE Defined key 'tab' doesn't seem to be working properly in the mode map
   looks like a yasnippet issue some how, need to investigate further,
   for the moment just turn off yas-minor-mode to resolve
** DONE Build details are in reverse order
   title pretty much says it all doesn't it
** DONE Build all doesn't work
** DONE Running test
** TODO Need to change the syntax for new test-suites from "add" to "new" 
        move the command key to 'n' and using 'a' for adding new tests
        to a test suite, will likely need to modify the ut-framework
        to include new defcustoms to facilitate adding new tests to
        existing test-suites 
