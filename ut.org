#+TITLE: UT the emacs unified unit testing environment
#+AUTHOR: Tom Hartman

* Overview
* Frameworks

  UT mode relys on various frameworks to define how to interact with
specific unit testing packages. UT comes with built in frameworks for
cunit and cppunit. To extend the behavior of UT to work with a
different language/unit testing package, a new framework needs to be
created.

** Defining a New Framework
   
   `ut-define-framework' accepts 2 required and 7 optional keyword parameters
   used to define how ut interacts with the specific testing
   framework, the testing project, and the tests themselves.
   the tests themselves. Below the list of keyword parameters
   accepted:

** Keywords
*** :run-process-fn (test-suite conf buffer)
    Create and return a process of the running test-suite. The process
    should use BUFFER as 
*** :run-filter-fn (test-suite run-exit-status run-output)
    
*** :build-process-fn    
*** :build-filter-fn
*** :debug-fn
*** :new-project-fn
*** :new-test-suite-fn
*** :new-test-fn
*** :find-source-fn

** Custom Variables
   Each keyword value sent to the is assigned to a custom variable created during
   the definition process. As an example a, when defining the
   framework cunit the following custom variables are created:
   
   - ut-cunit-build-process-hook
   - ut-cunit-build-filter-hook
   - ut-cunit-
   - ut-cunit-run-filter-hook
   - ut-cunit-debug-hook
   - ut-cunit-find-source-hook
   - ut-cunit-new-project-hook
   - ut-cunit-new-test-suite-hook
   - ut-cunit-new-test-hook

* Structures
** ut-conf
    Ut conf is a hash table of values defining the various defined
    tests. The struture of which is:
    
| Key Name      | Type        | Description                      |
|---------------+-------------+----------------------------------|
| :project-name | string      | Name of the project              |
| :projec-dir   | string/path | Path of the project              |
| :test-dir     | string/path | Root of the test directory       |
| :framework    | symbol      | Default framework for unit tests |
| :test-suites  | hash table  | Defined test suites              |

     Each test suite is a hash table with the following keys:
| Key Name          | Type                | Description                          |
|-------------------+---------------------+--------------------------------------|
| :test-name        | string              | Name of test suite                   |
| :test-dir         | string/path         | Root directory of the test-suite     |
| :framework        | symbol              | Framework of the test-suite          |
| :build-command    | string/function/nil | Command to build the test-suite      |
| :build-filter     | function/nil        | Function to process the build output |
| :run-command      | string/function     | Command to run the test-suite        |
| :run-filter       | function/nil        | Function to process the run output   |
| :build-status     | symbol              | Status of the most recent build      |
| :run-status       | symbol              | Status of the most recent run        |
| :tests            | hash-table          | Table of tests within test-suite     |
| :summarize-build  | bool                | Summarize build display              |
| :build-start-line | integer             | (internal only)                      |
| :build-end-line   | integer             | (internal only)                      |
| :run-start-line   | integer             | (internal only)                      |
| :run-end-line     | integer             | (internal only)                      |

Each test is a hash table with the following keys:
| Key Name     | Type            | Description                              |
|--------------+-----------------+------------------------------------------|
| :name        | string          | Name of test                             |
| :status      | symbol          | Status of the most recent run            |
| :file-name   | string/file/nil | File where the most recent error occured |
| :line-number | integer         | Line where the most recent error occured |
| :condition   | string          | Reason for test failure                  |
* UT Process
** Overview
   UT process is a means to unify processing calling and associated
   logging. Frameworks do not need to attach their own process filter
   and process sentinel functions, these are attached when
   ut-process-start is called. The sentinel function will pass the
   process structure, process status (signal or exit), the exit-code
   (or signal number), and the text output to the post function. An
   optional pre-func can be provided and is called prior to process
   creation. This can be used to setup the ut structures in
   preparation for the process call.

   Each ut environment (project).
* Notes
Currently working on testing the ut-framework stuff.
