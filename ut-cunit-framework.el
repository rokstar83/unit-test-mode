;;; ut-cunit-framework.el --- Defines a unit testing framework for cunit

;; Copyright (c) 2014 Thomas Hartman (thomas.lees.hartman@gmail.com)

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or the License, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;;; Commentary:

;; Define the testing framework for cunit

;;; Code:

(require 'dash)
(require 'ht)
(require 'ut)
(require 'ut-common-framework)

(defgroup ut-cunit nil
  "cunit integration for ut mode"
  :prefix "ut-cunit-"
  :group 'ut)

(defcustom ut-cunit-default-top-makefile.am
  "SUBDIRS = src"
  "string that makes up the top level makefile.am for a cunit test-suite."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-default-src-makefile.am
  "AM_CPPFLAGS = -g -I%project-dir%/src -I/usr/local/include/
bin_PROGRAMS = %test-name%_tests
%test-name%_tests_SOURCES = main.c %test-name%_tests.c %project-dir%/src/%test-name%.c
%test-name%_tests_LDADD = -L/usr/local/lib/ -lcunit -lcunitsexpoutputter"
  "string that makes up the contents of the src level makefile.am"
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-default-mainfile
  "#include <CUnit/CUnit.h>
#include <cunitsexpoutputter/sexp_outputter.h>
#include <CUnit/TestDB.h>
#include <stdio.h>
#include \"%test-name%_tests.h\"

int main(int argc, char ** argv)
{
   CU_pSuite suite = NULL;
   CU_ErrorCode err = CU_initialize_registry();

   if(err != CUE_SUCCESS)
      return 1;

   suite = %test-name%_test_suite();
   if(suite == NULL) {
      CU_cleanup_registry();
      return CU_get_error();
   }

   CU_sexp_set_output(stdout);
   CU_sexp_run_tests();

   CU_cleanup_registry();
   return CU_get_error();
}"
  "Default contents of the `main.c' file for a cunit test suite."
  :group 'ut-cunit
  :risky t
  :type 'string
  )

(defcustom ut-cunit-default-testheader
  "#ifndef %TEST-NAME%_TESTS_H_
#define %TEST-NAME%_TESTS_H_

#include <CUnit/CUnit.h>
/* START TEST PROTOTYPES */
/* END TEST PROTOTYPES */

CU_pSuite %test-name%_test_suite();

#endif/* %TEST-NAME%_TESTS_H_ */"
  "Default contents of the header file for a cunit test suite."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-hdr-start-sentinel
  "/* START TEST PROTOTYPES */"
  "Default string marking the beginning of test function prototypes in a cunit test suite header."
  :group 'ut-cunit
  :risky nil
  :type 'string)

(defcustom ut-cunit-hdr-end-sentinel
  "/* END TEST PROTOTYPES */"
  "Default string marking the end of test function prototypes in a cunit test suite header."
  :group 'ut-cunit
  :risky nil
  :type 'string)

(defcustom ut-cunit-default-testsource
  "#include \"%test-name%_tests.h\"
#include <%test-name%.h>

/* START TEST DEFINITIONS */

/* END TEST DEFINITIONS */

CU_pSuite %test-name%_test_suite()
{
  CU_pSuite suite = NULL;

  suite = CU_add_suite(\"%test-name%_suite\", NULL, NULL);

  /* ADD TESTS TO SUITE HERE */

  return suite;
}"
  "Default contents of the source file for a cunit test suite."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-src-start-sentinel
  "/* START TEST DEFINITIONS */"
  "Default string marking the beginning of test function definitions in a cunit test suite header."
  :group 'ut-cunit
  :risky nil
  :type 'string)

(defcustom ut-cunit-src-end-sentinel
  "/* END TEST DEFINITIONS */"
  "Default string marking the end of test function prototypes in a cunit test suite header."
  :group 'ut-cunit
  :risky nil
  :type 'string)

(defcustom ut-cunit-src-test-text
  "void %test-name%()
{
   CU_FAIL(\"Test not implemented\");
}
"
  "Default new src definition of a test function."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-hdr-test-text
  "void %test-name%();"
  "Default new hdr prototype definition of a test function."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-src-add-to-test-suite-text
  "CU_add_test(suite, \"%test-name%\", %test-name%"
  "Default text to add a new test into an existing test-suite."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defcustom ut-cunit-auto-gen-comment
  "Generated by UT Emacs mode."
  "Auto generation message for ut-cunit."
  :group 'ut-cunit
  :risky t
  :type 'string)

(defun ut-cunit-process-build-data (suite build-exit-status build-output)
  "Process build data generated by building SUITE with BUILD-EXIT-STATUS and BUILD-OUTPUT."
  (ht-set! suite :build-status (if (= build-exit-status 0) 'built 'error))
  (ht-set! suite :build-details (mapconcat #'identity build-output "")))

(defun ut-cunit-process-run-data (suite run-exit-status run-output)
  "Process run data generated by running SUITE with RUN-EXIT-STATUS and RUN-OUTPUT."
  (let ((result (ut-cunit-convert-run-data (read (mapconcat #'identity run-output "")))))
    (ht-set! suite :run-status (ut-cunit-result-status result))
    (ht-set! suite :run-start-time (ut-cunit-result-start-time result))
    (ht-set! suite :run-end-time (ut-cunit-result-end-time result))
    (ht-set! suite :run-details (ut-cunit-result-run-details result (ut-test-suite-name suite)))))

(defun ut-cunit-convert-run-data (results)
  "Convert the plist RESULTS data to a hash table."
  (let ((retval (ht<-plist results)))
    (ht-set! retval :test-suites (mapcar #'ht<-plist (ht-get retval :test-suites)))
    (mapc #'(lambda (test-suite)
              (ht-set! test-suite :tests (mapcar #'ht<-plist (ht-get test-suite :tests))))
          (ht-get retval :test-suites))
    retval))

;; result accessor functions

(defun ut-cunit-result-status (result)
  "Return the status of the test RESULT."
  (if (not (null (ht-get result :test-suites)))
      (ht-get (car (ht-get result :test-suites)) :status)
    'unknown))

(defun ut-cunit-result-start-time (result)
  "Return the start time of the test RESULT."
  (ht-get result :start-time))

(defun ut-cunit-result-end-time (result)
  "Return the end time of the test RESULT."
  (ht-get result :end-time))

(defun ut-cunit-result-run-details (result suite-name)
  "Return the details of the last run from RESULT for SUITE-NAME."
  (when (or (not (ht-contains? result :test-suites))
            (not (-any? #'(lambda (test-suite-result)
                            (and (ht? test-suite-result) (ht-contains? test-suite-result :name)))
                        (ht-get result :test-suites))))
    (error "Malformed run result"))
  (let ((test-suite (-first #'(lambda (test-suite-result)
                                (string= (ht-get test-suite-result :name)
                                         (format "%s_suite" suite-name)))
                            (ht-get result :test-suites))))
    (ht-get test-suite :tests)))

(defun ut-cunit-setup-new-test-suite (test-suite conf)
  "Setup a new TEST-SUITE for CONF."
  (let* ((name (ut-test-suite-name test-suite))
         (dir (f-join (ut-test-dir conf) (ut-test-suite-test-dir test-suite)))
         (rel-conf (let ((tmp (ht-copy conf)))
                     (ht-set! tmp :project-dir
                              (f-relative (ht-get tmp :project-dir) (f-join dir "src"))) tmp))
         (top-makefile.am-text (ut-format (ut-format ut-cunit-default-top-makefile.am test-suite) conf))
         (src-makefile.am-text (ut-format (ut-format ut-cunit-default-src-makefile.am test-suite)
                                          rel-conf))
         (mainfile-text (ut-format (ut-format ut-cunit-default-mainfile test-suite) conf))
         (testheader-text (ut-format (ut-format ut-cunit-default-testheader test-suite) conf))
         (testsource-text (ut-format (ut-format ut-cunit-default-testsource test-suite) conf))
         (project-name (ut-project-name conf)))
    ;; Setup the directory structure
    (ut-cunit-create-test-suite-subdirs dir)
    ;; Setup default build/autotools files
    (ut-add-makefile.am-subdir (ut-test-suite-test-dir test-suite)
                                (f-join (ut-test-dir conf) "Makefile.am"))
    (ut-add-ac-config-files (f-relative (ut-test-suite-test-dir test-suite) (ut-project-dir conf))
                             (f-join (ut-project-dir conf) "configure.ac"))
    (f-write-text top-makefile.am-text 'utf-8 (f-join dir "Makefile.am"))
    (f-write-text src-makefile.am-text 'utf-8 (f-join dir "src/Makefile.am"))
    ;; create default source and headers
    (f-write-text (concat (c-header "main.c" name project-name) mainfile-text)
                  'utf-8 (f-join dir "src/main.c"))
    (f-write-text (concat (c-header (format "%s_tests.h" name) name project-name) testheader-text)
                  'utf-8 (f-join dir (format "src/%s_tests.h" name)))
    (f-write-text (concat (c-header (format "%s_tests.c" name) name project-name) testsource-text)
                  'utf-8 (f-join dir (format "src/%s_tests.c" name)))))

(defun ut-cunit-create-test-suite-subdirs (test-suite-dir)
  "Create directory structure for a test suite at TEST-SUITE-DIR."
  (mapc #'(lambda (dir)
            (unless (f-exists? dir)
              (make-directory dir)))
        (list test-suite-dir
              (f-join test-suite-dir "src")
              (f-join test-suite-dir "data"))))

(defun ut-cunit-setup-new-project (conf)
  "Setup testing folders for a new project defined in CONF."
  (unless (f-exists? (ut-test-dir conf))
    (make-directory (ut-test-dir conf)))
  (ut-add-makefile.am-subdir (f-relative (ut-test-dir conf) (ut-project-dir conf))
                              (f-join (ut-project-dir conf) "Makefile.am"))
  (f-write-text "SUBDIRS = " 'utf-8 (f-join (ut-test-dir conf) "Makefile.am")))

(defun c-header (file-name test-name project-name)
  "Prepend copyright, header and other license information to FILE-NAME with TEST-NAME and PROJECT-NAME."
  (concat (mapconcat #'(lambda (x) (c-comment-pretty x))
                     (list (make-string 76 ?*)
                           (copyright file-name test-name project-name)
                           ""
                           gplv2-license
                           (make-string 76 ?*))
                     "\n")
          "\n"))

(defun c-comment-pretty (lines)
  "Apply /* and */ to each line in LINES and return the concatenation of all LINES."
  (if (stringp lines)
      (concat "/*" lines (make-string (- 76 (length lines)) ? ) "*/")
    (mapconcat #'identity
               (mapcar #'(lambda (line)
                           (concat "/*" line (make-string (- 76 (length line)) ? )
                                   "*/"))
                       lines)
               "\n")))

(defun ut-cunit-create-new-test (conf test-name test-suite)
  "Using CONF, Add TEST-NAME to TEST-SUITE."
  (let* ((test-src-dir (f-join (ut-test-dir conf) (ut-test-suite-test-dir test-suite) "src"))
         (src-test-text (ut-format ut-cunit-src-test-text (ht (:test-name test-name))))
         (src-add-test-text (ut-format "CU_add_test(suite, \"%test-name%\", %test-name%);" (ht (:test-name test-name))))
         (hdr-test-text (ut-format ut-cunit-hdr-test-text (ht (:test-name test-name))))
         (src-file-name (format "%s/%s_tests.c" test-src-dir (ut-test-suite-name test-suite)))
         (hdr-file-name (format "%s/%s_tests.h" test-src-dir (ut-test-suite-name test-suite))))
    (when (not (f-exists? src-file-name))
      (error "Could not find `%s' to add test to" src-file-name))
    (when (not (f-exists? hdr-file-name))
      (error "Could not find `%s' to add test to" hdr-file-name))
    ; Check to make sure that the file isn't already open in a buffer
    (ut-check-open-save-abort src-file-name)
    (ut-check-open-save-abort hdr-file-name)
    ; Insert new test functions stubs
    (ut-insert-into-file hdr-test-text hdr-file-name
                         (ut-cunit-find-hdr-end-sentinel-line hdr-file-name))
    (ut-insert-into-file src-test-text src-file-name
                         (ut-cunit-find-src-end-sentinel-line src-file-name))
    (ut-insert-into-file src-add-test-text src-file-name
                         (ut-cunit-find-test-suite-sentinel-line src-file-name))
    ; Reload the header file buffer if open
    (let ((buf (get-file-buffer hdr-file-name)))
      (when buf
        (with-current-buffer buf
          (revert-buffer t nil t))))
    (let ((buf (get-file-buffer src-file-name)))
      (if (and buf (get-buffer-window buf))
          (with-current-buffer buf
            (revert-buffer t nil t))
        (switch-to-buffer-other-window (find-file-noselect src-file-name))))))

(defun ut-cunit-find-hdr-start-sentinel-line (file-name)
  "Find the line number in FILE-NAME of the header start sentinel."
  (ut-find-line-in-file ut-cunit-hdr-start-sentinel file-name))

(defun ut-cunit-find-hdr-end-sentinel-line (file-name)
  "Find the line number in FILE-NAME of the header end sentinel."
  (ut-find-line-in-file ut-cunit-hdr-end-sentinel file-name))

(defun ut-cunit-find-src-start-sentinel-line (file-name)
  "Find the line number in FILE-NAME of the source start sentinel."
  (ut-find-line-in-file ut-cunit-src-start-sentinel file-name))

(defun ut-cunit-find-src-end-sentinel-line (file-name)
  "Find the line number in FILE-NAME of the source end sentinel."
  (ut-find-line-in-file ut-cunit-src-end-sentinel file-name))

(defun ut-cunit-find-test-suite-sentinel-line (file-name)
  "Find the line number in FILE-NAME of the test-suite sentinel."
  (ut-find-line-in-file "  /* ADD TESTS TO SUITE HERE */" file-name))

(ut-define-framework cunit
  :build-command "make -C %test-dir%"
  :build-filter 'ut-cunit-process-build-data
  :run-command "%test-dir%/src/%test-name%_tests --writer sexp"
  :run-filter 'ut-cunit-process-run-data
  :new-test-suite 'ut-cunit-setup-new-test-suite
  :new-test 'ut-cunit-create-new-test
  :new-project 'ut-cunit-setup-new-project)

(provide 'ut-cunit-framework)

;;; ut-cunit-framework.el ends here

;; Local Variables:
;; eval: (setq flycheck-emacs-lisp-load-path (append load-path (list "/home/thartman/projects/ut")))
;; End:
