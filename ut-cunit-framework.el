;;; ut-cunit-framework.el --- Defines a unit testing framework for cunit

;; Copyright (c) 2014 Thomas Hartman (thomas.lees.hartman@gmail.com)

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or the License, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;;; Commentary:

;; Define the testing framework for cunit

;;; Code:

(require 'dash)
(require 'ht)
(require 'atu)
(require 'ut)
(require 'ut-common-framework)

(defvar cunit-default-top-makefile.am
  "SUBDIRS = src")

(defvar cunit-default-src-makefile.am
  "AM_CPPFLAGS = -g -I%project-dir%/src -I/usr/local/include/
bin_PROGRAMS = %test-name%_tests
%test-name%_tests_SOURCES = main.c %test-name%_tests.c
%test-name%_tests_LDADD = -L/usr/local/lib/ -lcunit -lcunitsexpoutputter")

(defvar cunit-default-mainfile
  "#include <CUnit/CUnit.h>
#include <cunitsexpoutputter/sexp_outputter.h>
#include <CUnit/TestDB.h>
#include <stdio.h>
#include \"%test-name%_tests.h\"

int main(int argc, char ** argv)
{
   CU_pSuite suite = NULL;
   CU_ErrorCode err = CU_initialize_registry();

   if(err != CUE_SUCCESS)
      return 1;

   suite = %test-name%_test_suite();
   if(suite == NULL) {
      CU_cleanup_registry();
      return CU_get_error();
   }

   CU_sexp_set_output(stdout);
   CU_sexp_run_tests();

   CU_cleanup_registry();
   return CU_get_error();
}")

(defvar cunit-default-testheader
  "#ifndef %TEST-NAME%_TESTS_H_
#define %TEST-NAME%_TESTS_H_

#include <CUnit/CUnit.h>
/* START TEST PROTOTYPES */

/* END TEST PROTOTYPES */

CU_pSuite %test-name%_test_suite();

#endif/* %TEST-NAME%_TESTS_H_ */")

(defvar cunit-default-testsource
  "#include \"%test-name%_tests.h\"
#include <%test-name%.h>

/* START TEST DEFINITIONS */

/* END TEST DEFINITIONS */

CU_pSuite %test-name%_test_suite()
{
  CU_pSuite suite = NULL;

  suite = CU_add_suite(\"%test-name%_suite\", NULL, NULL);

  /* ADD tests here */

  return suite;
}
")

(defvar cunit-auto-gen-comment
"Generated by UT Emacs mode.")

(defun ut-cunit-process-build-data (suite build-exit-status build-output)
  "Process build data generated by building SUITE with BUILD-EXIT-STATUS and BUILD-OUTPUT."
  (ht-set suite :build-status (if (= build-exit-status 0) 'built 'error))
  (ht-set suite :build-details (mapconcat #'identity build-output "")))

(defun ut-cunit-process-run-data (suite run-exit-status run-output)
  "Process run data generated by running SUITE with RUN-EXIT-STATUS and RUN-OUTPUT."
  (let ((results (read (mapconcat #'identity run-output ""))))
    (if (not (ut-resultp))
        (ht-set suite :run-status 'error)
      (ht-set suite :run-status results))))

(defun ut-cunit-setup-new-test-suite (test-suite conf)
  "Setup a new TEST-SUITE for CONF."
  (let* ((name (ut-test-suite-name test-suite))
         (dir (f-join (ut-test-dir conf) (ut-test-suite-test-dir test-suite)))
         (rel-conf (let ((tmp (ht-copy conf)))
                     (ht-set! tmp :project-dir
                              (f-relative (ht-get tmp :project-dir) (f-join dir "src"))) tmp))
         (top-makefile.am-text (ut-format (ut-format cunit-default-top-makefile.am test-suite) conf))
         (src-makefile.am-text (ut-format (ut-format cunit-default-src-makefile.am test-suite)
                                          rel-conf))
         (mainfile-text (ut-format (ut-format cunit-default-mainfile test-suite) conf))
         (testheader-text (ut-format (ut-format cunit-default-testheader test-suite) conf))
         (testsource-text (ut-format (ut-format cunit-default-testsource test-suite) conf))
         (project-name (ut-project-name conf)))
    ;; Setup the directory structure
    (ut-cunit-create-test-suite-subdirs dir)
    ;; Setup default build/autotools files
    (atu-add-makefile.am-subdir (ut-test-suite-test-dir test-suite)
                                (f-join (ut-test-dir conf) "Makefile.am"))
    (atu-add-ac-config-files (f-relative (ut-test-suite-test-dir test-suite) (ut-project-dir conf))
                             (f-join (ut-project-dir conf) "configure.ac"))
    (f-write-text top-makefile.am-text 'utf-8 (f-join dir "Makefile.am"))
    (f-write-text src-makefile.am-text 'utf-8 (f-join dir "src/Makefile.am"))
    ;; create default source and headers
    (f-write-text (concat (c-header "main.c" name project-name) mainfile-text)
                  'utf-8 (f-join dir "src/main.c"))
    (f-write-text (concat (c-header (format "%s_tests.h" name) name project-name) testheader-text)
                  'utf-8 (f-join dir (format "src/%s_tests.h" name)))
    (f-write-text (concat (c-header (format "%s_tests.c" name) name project-name) testsource-text)
                  'utf-8 (f-join dir (format "src/%s_tests.c" name)))))

(defun ut-cunit-create-test-suite-subdirs (test-suite-dir)
  "Create directory structure for a test suite at TEST-SUITE-DIR."
  (mapc #'(lambda (dir)
            (unless (f-exists? dir)
              (make-directory dir)))
        (list test-suite-dir
              (f-join test-suite-dir "src")
              (f-join test-suite-dir "data"))))

(defun ut-cunit-setup-new-project (conf)
  "Setup testing folders for a new project defined in CONF."
  (unless (f-exists? (ut-test-dir conf))
    (make-directory (ut-test-dir conf)))
  (atu-add-makefile.am-subdir (f-relative (ut-test-dir conf) (ut-project-dir conf))
                              (f-join (ut-project-dir conf) "Makefile.am"))
  (f-write-text "SUBDIRS = " 'utf-8 (f-join (ut-test-dir conf) "Makefile.am")))

(defun c-header (file-name test-name project-name)
  "Prepend copyright, header and other license information to FILE-NAME with TEST-NAME and PROJECT-NAME."
  (concat (mapconcat #'(lambda (x) (c-comment-pretty x))
                     (list (make-string 76 ?*)
                           (copyright file-name test-name project-name)
                           ""
                           gplv2-license
                           (make-string 76 ?*))
                     "\n")
          "\n"))

(defun c-comment-pretty (lines)
  "Apply /* and */ to each line in LINES and return the concatenation of all LINES."
  (if (stringp lines)
      (concat "/*" lines (make-string (- 76 (length lines)) ? ) "*/")
    (mapconcat #'identity
               (mapcar #'(lambda (line)
                           (concat "/*" line (make-string (- 76 (length line)) ? )
                                   "*/"))
                       lines)
               "\n")))

(ut-define-framework cunit
  :build-command "make -C %test-dir%"
  :build-filter 'ut-cunit-process-build-data
  :run-command "%test-dir%/%test-name% --writer sexp"
  :run-filter 'ut-cunit-process-run-data
  :new-test-suite 'ut-cunit-setup-new-test-suite
  :new-project 'ut-cunit-setup-new-project)

(provide 'ut-cunit-framework)

;;; ut-cunit-framework.el ends here

;; Local Variables:
;; eval: (setq flycheck-emacs-lisp-load-path (append load-path (list "/home/thartman/projects/atu" "/home/thartman/projects/ut")))
;; End:
